defaults: &defaults
  TIMEZONE: 'Paris'

  # Configuration variables for Redis.
  REDIS_URL:      redis://localhost:6379
  REDIS_PASSWORD: ~ # By default no password is sent to Redis server. Change this if you want to connect using password.

  # admin role account
  ADMIN: 'admin@peatio.tech'

  # site host
  URL_HOST: localhost:3000
  URL_SCHEME: http
  FORCE_SECURE_CONNECTION: 'false' # Set to "true" to disable access via unsecured HTTP, send HSTS headers and use secure cookies.

  # Session lifetime in seconds.
  SESSION_LIFETIME: '3600'

  # WebSocket Streaming API settings
  WEBSOCKET_HOST: 0.0.0.0
  WEBSOCKET_PORT: '8080'

  # Uncomment following lines to enable secure WebSocket (wss)
  # WEBSOCKET_SSL_KEY: 'your_server.key'
  # WEBSOCKET_SSL_CERT: 'your_server.crt'

  # Configuration variables for Pusher.
  PUSHER_APP:              '468163'
  PUSHER_SECRET:           671b8d34f5ed60160172
  PUSHER_HOST:             api-eu.pusher.com
  PUSHER_PORT:             '443'
  PUSHER_SCHEME:           https
  PUSHER_CLIENT_KEY:       995279a074b2cd777cf0
  PUSHER_CLIENT_HTTP_HOST: sockjs-eu.pusher.com
  PUSHER_CLIENT_WS_HOST:   ws-eu.pusher.com
  PUSHER_CLIENT_WS_PORT:   '80'
  PUSHER_CLIENT_WSS_PORT:  '443'
  PUSHER_CLIENT_ENCRYPTED: 'on'

  # Enabled OAuth2 provider.
  # Don't forget to check out configuration at config/initializers/omniauth.rb.
  OAUTH2_SIGN_IN_PROVIDER: ~

  # Configuration variables for sign in with Google.
  # See https://github.com/zquestz/omniauth-google-oauth2
  GOOGLE_CLIENT_ID:
  GOOGLE_CLIENT_SECRET:
  GOOGLE_OAUTH2_REDIRECT_URL: ~ # Specify URL address to which user will be redirected after successful sign in.

  # Configuration variables for sign in with Auth0.
  # See https://github.com/auth0/omniauth-auth0
  AUTH0_OAUTH2_DOMAIN:
  AUTH0_OAUTH2_CLIENT_ID:
  AUTH0_OAUTH2_CLIENT_SECRET:
  AUTH0_OAUTH2_REDIRECT_URL:  ~ # Specify URL address to which user will be redirected after successful sign in.

  # Configuration variables for sign in with Barong OAuth2 server.
  # See https://github.com/rubykube/omniauth-barong
  #
  # Barong uses Doorkeeper under the hood so you can refer to it's docs any time.
  # See more information at https://github.com/doorkeeper-gem/doorkeeper/wiki/Testing-your-provider-with-OAuth2-gem
  BARONG_CLIENT_ID:           ~
  BARONG_CLIENT_SECRET:       ~
  BARONG_DOMAIN:              ~
  BARONG_OAUTH2_REDIRECT_URL: ~ # Specify URL address to which user will be redirected after successful sign in.

  # Configuration variables for API CORS.
  #
  # Set list of allowed origins using the variable below.
  # By default it allows access to API from all origins.
  # See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Origin
  API_CORS_ORIGINS:           '*'
  API_CORS_ALLOW_CREDENTIALS: ~

  # Configuration variables for Sentry.
  SENTRY_ENV:          production # Specify environments separated by comma for which Sentry should be initialized.
  SENTRY_DSN_BACKEND:  ~          # Specify Sentry DSN used for Rails application.
  SENTRY_DSN_FRONTEND: ~          # Specify Sentry DSN used for JavaScript application.

  # Configuration variables for appearance.
  LOGO_URL:                       ~
  HEADER_BACKGROUND_COLOR:        ~
  HEADER_BORDER_COLOR:            ~
  HEADER_LINK_COLOR:              ~
  HEADER_LINK_HOVER_COLOR:        ~
  HEADER_RUBRIC_ACTIVE_COLOR:     ~
  HEADER_RUBRIC_BACKGROUND_COLOR: ~
  MAIL_HEADER_BACKGROUND_COLOR:   ~

  # Configuration variables for webhooks.
  WEBHOOKS_SECURE_URL_COMPONENT: ~ # Optional. Set value if you want to secure URL to webhooks.
  # Example:
  #   When WEBHOOKS_SECURE_URL_COMPONENT is set to "B6p2csgf2h" the URL to webhooks becomes /webhooks/B6p2csgf2h/btc/hook.
  #   The default URL is /webhooks/btc/hook.

  # Customize page metadata like title, description & keywords for landing, cabinet & admin modules.
  METADATA_TITLE:       Peatio Exchange
  METADATA_DESCRIPTION: The Opensource Cryptocurrency Exchange
  METADATA_KEYWORDS:    Peatio,Opensource,Exchange,Cryptocurrency

  # Customize bank details which is shown at fiat deposit page. You are free to supply HTML here.
  BANK_DETAILS_HTML: |
    <div><strong>Use this bank to make a deposit:</strong></div>
    <div>Bank: National Bank of World</div>
    <div>Account: 1234567890</div>

  # Set to "true" to disable markets UI (admins still have access).
  DISABLE_MARKETS_UI: ~

  # Set to "true" to disable cabinet UI (admins still have access).
  DISABLE_CABINET_UI: ~

  # Configuration variables for JWT verification.
  # Get explanation at https://en.wikipedia.org/wiki/JSON_Web_Token.
  #
  # JWT_PUBLIC_KEY
  #
  # JWT provider uses private key for encoding JSON Web Tokens
  # while public key is used for decoding by resources.
  #
  # For example, Barong is JWT provider, Peatio is resource accepting JWT.
  # Barong must have private key installed, Peatio must have public key installed.
  #
  # You can generate keypair by running:
  #
  #   ruby -e "require 'openssl'; require 'base64'; OpenSSL::PKey::RSA.generate(2048).tap { |p| puts '', 'PRIVATE RSA KEY (URL-safe Base64 encoded, PEM):', '', Base64.urlsafe_encode64(p.to_pem), '', 'PUBLIC RSA KEY (URL-safe Base64 encoded, PEM):', '', Base64.urlsafe_encode64(p.public_key.to_pem) }"
  #
  # Copy the generated private key and put it's value to appropriate variable at JWT provider (for example, at Barong it will be JWT_SHARED_SECRET_KEY).
  # Copy the generated public key and put it's value to variable JWT_PUBLIC_KEY (at Peatio).
  #
  # Peatio and JWT provider should have the same keypair installed, or they would not understand each other.
  #
  # You may want to adjust key length or cipher.
  #
  # Development and test environments already don't include sample keys.
  #
  # You can generate valid JWT by running:
  #
  #   JWT.encode(payload, OpenSSL::PKey.read(Base64.urlsafe_decode64(ENCODED_PRIVATE_KEY)), ENV.fetch('JWT_ALGORITHM'))
  #
  # Replace ENCODED_PRIVATE_KEY with private key printed by previous command.
  #
  # You can decode JWT by running:
  #
  #   JWT.decode(token, OpenSSL::PKey.read(Base64.urlsafe_decode64(ENCODED_PUBLIC_KEY)), true, algorithms: [ENV.fetch('JWT_ALGORITHM')])
  #
  # To authenticate using JWT send it's value in "Authorization" header:
  #
  #   curl -H "Authorization: Bearer TOKEN" http://localhost:3000/api/v2/members/me
  #
  JWT_PUBLIC_KEY:        ~
  JWT_ALGORITHM:         RS256  # JWT signing algorithm (mandatory).
  JWT_ISSUER:            ~      # JWT issuer name (optional).
  JWT_AUDIENCE:          peatio # Could be comma-separated value (optional).
  JWT_DEFAULT_LEEWAY:    ~      # Seconds (optional).
  JWT_ISSUED_AT_LEEWAY:  '180'    # Seconds (optional).
  JWT_EXPIRATION_LEEWAY: ~      # Seconds (optional).
  JWT_NOT_BEFORE_LEEWAY: ~      # Seconds (optional).

  # Capybara configuration variables.
  TEST_SERVER_HOST: 127.0.0.1
  TEST_SERVER_PORT: '3000'
  TEST_APP_HOST:    peatio.local
  TEST_APP_PORT:    '80'

  # Specify the code of currency which is used to display the equivalent of the amounts of other currencies.
  # The specified currency should exist in database.
  DISPLAY_CURRENCY: usd

development:
  <<: *defaults

  # Development OAuth2 provider.
  OAUTH2_SIGN_IN_PROVIDER:    google

  # Development configuration variables for sign in with Google.
  GOOGLE_CLIENT_ID:           1044454023387-emhp5vmfnp5cf1n9juk09g8gcckrova7.apps.googleusercontent.com
  GOOGLE_CLIENT_SECRET:       tAFZvO200-0z3MpCyOpkPH0G

  # Development configuration variables for sign in with Auth0.
  AUTH0_OAUTH2_DOMAIN:        peatio-playground.auth0.com
  AUTH0_OAUTH2_CLIENT_ID:     lGKS9ADpknQr415RNZrrQTf3Jh8k2Fvc
  AUTH0_OAUTH2_CLIENT_SECRET: LxUPnrrrpRHSB-vVgWU3TwmakQ8acY5mYVTaVgkREQL3i9avjpOnWTXSSEsrbLzK

test:
  <<: *defaults

production:
  <<: *defaults
